#+TITLE: Emacs configuration
#+STARTUP: overview

* Appearance
** Cursor
*** Beacon
   ;; Highlight de cursor
   #+begin_src emacs-lisp
   (use-package beacon :ensure t :config (setq beacon-color "#6479AB"))
   (beacon-mode 1)
   #+end_src

*** Cursor Color

   ;; Highlight de cursor
   #+begin_src emacs-lisp
   (set-cursor-color "#ffffff") 
   #+end_src

** Font
   ;; Download fonts from here:
   ;; git clone https://github.com/powerline/fonts.git
   ;; git clone https://github.com/adobe-fonts/source-code-pro.git
   #+begin_src emacs-lisp
   ;(set-default-font "-*-Source Code Pro for Powerline-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
   (set-default-font "-*-Inconsolata for Powerline-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
   (set-face-attribute 'default nil :height 190)
   #+end_src

** Themes
   ;; Themes :-)
   #+begin_src emacs-lisp
   ;(use-package darktooth-theme       :ensure t                :config (load-theme 'darktooth t))
   ;(use-package doom-themes           :ensure t                :config (load-theme 'doom-tomorrow-night t))
   ;(use-package monokai-theme         :ensure t                :config (load-theme 'monokai t))
   ;(use-package molokai-theme         :ensure t                :config (load-theme 'molokai t))
   (use-package monokai-alt-theme     :ensure t                :config (load-theme 'monokai-alt t))
   ;(use-package spacemacs-common      :ensure spacemacs-theme  :config (load-theme 'spacemacs-dark t))
   #+end_src

* Editor
** General
   ;; Line numbers
   #+begin_src emacs-lisp
   (global-display-line-numbers-mode)  ;; Display line numbers
   (delete-selection-mode 1)           ;; Deletes selection mode while typing
   (save-place-mode 1)                 ;; Save cursor position between sessions
   #+end_src

** Mouse
  #+begin_src emacs-lisp
  (global-set-key (kbd "<mouse-4>") 'previous-line)               ; Mouse Down
  (global-set-key (kbd "<mouse-5>") 'next-line)                   ; Mouse Up
  #+end_src

** Shortcuts
  #+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-f")   'counsel-find-file)           ; MUCH better find file option
  (global-set-key (kbd "C-l")       'goto-line)                   ; Go to line
  (global-set-key (kbd "C-n")       'mc/mark-next-like-this-word) ; Mark all words in the selected region
  (global-set-key (kbd "C-p")       'fiplr-find-file)             ; CTRL+P  :-) What else?
  (global-set-key (kbd "M-a")       'mark-whole-buffer)           ; Mark whole buffer
  (global-set-key (kbd "M-b")       'buffer-menu)                 ; Show buffers
  (global-set-key (kbd "M-c")       'copy-region-as-kill)         ; Copy
  (global-set-key (kbd "M-e")       'shell-command)               ; Execute a command
  (global-set-key (kbd "M-f")       'counsel-ag)                  ; ag in the current dir
  (global-set-key (kbd "M-m")       'mc/edit-lines)               ; Multiple cursors para una línea
  (global-set-key (kbd "M-o")       'dumb-jump-go)                ; Go to definition
  (global-set-key (kbd "M-p")       'dumb-jump-back)              ; Go back from definition
  (global-set-key (kbd "M-r")       'counsel-grep)                ; grep in the current file
  (global-set-key (kbd "M-u")       'undo-tree-visualize)         ; Undo tree
  (global-set-key (kbd "M-t")       'treemacs)                    ; Show/Hide NeoTree (filesystem tree)
  (global-set-key (kbd "M-v")       'yank)                        ; Paste
  (global-set-key (kbd "M-RET")     'smex)                        ; smex
  (global-set-key (kbd "M-g b")     'magit-blame)                 ; Git Blame
  (global-set-key (kbd "M-g d")     'magit-diff)                  ; Git Diff
  (global-set-key (kbd "M-g k")     'git-link)                    ; Git Links for Bitbucket/Github/etc.
  (global-set-key (kbd "M-g l")     'magit-log)                   ; Git log
  (global-set-key (kbd "M-g p")     'magit-push)                  ; Git Push
  (global-set-key (kbd "M-g t")     'git-timemachine-toggle)      ; Git Time Machine
  (global-set-key (kbd "M-g s")     'magit-status)                ; Git status
  (global-set-key (kbd "M-g u")     'magit-pull)                  ; Git Pull  
  #+end_src

** Syntax Packages
*** Dockerfile
   #+begin_src emacs-lisp
     (use-package dockerfile-mode :ensure t)
   #+end_src
*** Elixir
   #+begin_src emacs-lisp
     (use-package elixir-mode :ensure t)
   #+end_src
*** Markdown
   #+begin_src emacs-lisp
     (use-package markdown-mode :ensure t)
   #+end_src
*** Protobuf
   #+begin_src emacs-lisp
   (use-package protobuf-mode :ensure t)
   #+end_src
*** YAML
   #+begin_src emacs-lisp
   (use-package yaml-mode :ensure t)
   #+end_src
** TAB configuration
  #+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq         indent-tabs-mode nil)
  (setq         c-basic-offset          2)
  (setq         tab-width               2)
  #+end_src

** TEMP files
  #+begin_src emacs-lisp
  (setq backup-directory-alist
    `((".*" . ,temporary-file-directory)))

  (setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t)))
  #+end_src
* OSX Specific
** Keyboard
   ; Make ALTGR to work like ALT
   #+begin_src emacs-lisp
   (setq mac-option-modifier nil
         mac-command-modifier 'meta
         x-select-enable-clipboard t)
   #+end_src
** Packages
   ; When opening emacs from spotlight/alfred the environment variables are not set
   ; ...this package fixes that problem in OSX
   #+begin_src emacs-lisp
   (use-package exec-path-from-shell :ensure t)
   (exec-path-from-shell-initialize)
   #+end_src

* Startup
  #+begin_src emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)

    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    (use-package auto-package-update :ensure t)
  #+end_src
* Packages
** Counsel
   ;; This package is for better find file
   #+begin_src emacs-lisp
     (use-package counsel :ensure t)
   #+end_src
** Dumb Jump
   ;; Go to definition of things....
   #+begin_src emacs-lisp
     (use-package dumb-jump :ensure t)
   #+end_src
** Fiplr
   ;; CTRL-P like plugin
   ;; BE CAREFUL, this package is deprecated :-(
   #+begin_src emacs-lisp
   (use-package fiplr :ensure t)
   #+end_src
** FlyCheck
   ;; LINTer :-)
   #+begin_src emacs-lisp
   (use-package flycheck :ensure t)
   (global-flycheck-mode)
   #+end_src

** GitGutter
   #+begin_src emacs-lisp
   (use-package git-gutter+ :ensure t :config (global-git-gutter+-mode t))
   #+end_src

** Git Link
   ;; Return the git link for Bitbucket/Github
   #+begin_src emacs-lisp
   (use-package git-link :ensure t)  
   #+end_src

** Magit
   #+begin_src emacs-lisp
   (use-package magit :ensure t)
   #+end_src

** Multiple Cursors
   ;; Allows multiple cursors...
   #+begin_src emacs-lisp
     (use-package multiple-cursors :ensure t)
   #+end_src

** Tabnine
   ;;; This is kind of an AI to autocomplete in the code
   ;;; ...if you don't use the paid version, this does not work very well ¯\_(ツ)_/¯
   #+begin_src emacs-lisp
   (use-package company-tabnine  :ensure t)
   (add-to-list 'company-backends #'company-tabnine)
   (add-hook 'after-init-hook 'global-company-mode)
   (setq company-idle-delay 2)
   #+end_src

** Treemacs
   ;;; I like treemacs to traverse directory trees
   #+begin_src emacs-lisp
   (use-package treemacs  :ensure t
     :config
     (setq treemacs-width                     55)
     (setq treemacs-follow-mode               nil)
     (setq treemacs-position                  'right)
     (setq treemacs-show-hidden-files         t)
     (setq treemacs-sorting                   'alphabetic-desc))
   #+end_src
** Try
   ;;; This is to try packages before downloading them
   #+begin_src emacs-lisp
   (use-package try  :ensure t)
   #+end_src

** Undo Tree
   ;;; This is to try packages before downloading them
   #+begin_src emacs-lisp
   (use-package undo-tree
   :ensure t)
   (global-undo-tree-mode)
  #+end_src
